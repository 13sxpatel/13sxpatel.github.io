Notes CG

A + Summation (D * (max(0, N dot L)) + S*pow(max(0, E dot R, p)))  D = light color  L = light source phong shading equation   N L is unit length aka normal A rgb S rgb p = power law if S is white it looks like plastic if same shade looks like metal e= unit length vector from source to eye of viewer (0,0,1) in our case
r = 2* N * dot(N, L) - L


varying vec3 vPos;                               // Position in image
uniform float uTime;                             // Time
vec3 LDir = normalize(vec3(1.,-sin(uTime),.5));  // Light direction
vec3 LDir2 = normalize(vec3(1.,-sin(uTime),.5));  // Light direction

vec2 raytraceSphere(vec3 V, vec3 W, vec4 S) {
   V -= S.xyz;
   float B = 2. * dot(V, W);
   float C = dot(V, V) - S.w * S.w;
   float discrim = B*B - 4.*C;
   return discrim < 0. ? vec2(-1., -1)
                       : vec2(-B - discrim, -B + discrim) / 2.;
}

void main() {
   vec3 c = vec3(sin(vPos.y/.1+4.)*.04,sin(vPos.y/1.+4.) * .04,.009);                   // Dark background

   vec3 V = vec3(0.,0.,sin(uTime));                      // Ray origin
   vec3 W = normalize(vec3(vPos.xy, -3.));       // Ray direction
   vec4 S = vec4(tan(uTime/vPos.y),cos(uTime/vPos.x /50000.),-5.,sin(uTime/vPos.y));  // Animate sphere

   vec2 t = raytraceSphere(V, W, S);             // Ray trace sphere
vec3 Vv = vec3(0.,0.,1.);                      // Ray origin
   vec3 Ww = normalize(vec3(vPos.x, vPos.y, -3.));       // Ray direction
   vec4 Ss = vec4(sin(uTime *.9),cos(uTime*.9),-5.,sin(uTime/(vPos.x *1000000.)));  // Animate sphere

   vec2 tt = raytraceSphere(Vv, Ww, Ss);             // Ray trace sphere


   if (t.x > 0.) {
      vec3 P = V + t.x * W;                      // Point on sphere
      vec3 N = normalize(P - S.xyz);             // Surface normal
      float brightness = max(0., dot(N, LDir));
      brightness = mix(.1, brightness, .5);      // Diffuse surface
      c = vec3(.9,.2,1.) * brightness;
   }
if (tt.x > 0.) {
      vec3 P = Vv + tt.x * Ww;                      // Point on sphere
      vec3 N = normalize(P - Ss.xyz);             // Surface normal
      float brightness = max(0., dot(N, LDir2));
      brightness = mix(.1, brightness, .5);      // Diffuse surface
      c = vec3(cos(vPos.x *3.),sin(vPos.x),sin(vPos.y*10.)) * brightness;
   }

   gl_FragColor = vec4(sqrt(c), 1.);             // Final pixel color
}
